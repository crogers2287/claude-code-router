name: Sync with Upstream

on:
  schedule:
    # Run every day at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force_sync:
        description: 'Force sync even if there are conflicts'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/musistudio/claude-code-router.git
          git fetch upstream

      - name: Backup custom web interface
        run: |
          # Create backup of custom web interface and related files
          mkdir -p .backup/web
          if [ -d "src/web" ]; then
            cp -r src/web .backup/web/
          fi
          
          # Backup custom files that should be preserved
          files_to_backup=(
            "WEB_UI_README.md"
            "src/routes/webui.ts"
            "standalone-webui-test.js"
            "test-webui-server.js"
            "test-webui.sh"
            "capture-screenshots.js"
          )
          
          for file in "${files_to_backup[@]}"; do
            if [ -f "$file" ]; then
              mkdir -p ".backup/$(dirname "$file")"
              cp "$file" ".backup/$file"
            fi
          done

      - name: Create sync branch
        run: |
          # Create a new branch for the sync
          SYNC_BRANCH="auto-sync-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$SYNC_BRANCH"
          echo "SYNC_BRANCH=$SYNC_BRANCH" >> $GITHUB_ENV

      - name: Merge upstream changes
        id: merge
        run: |
          # Attempt to merge upstream/main
          set +e
          git merge upstream/main --no-edit
          MERGE_EXIT_CODE=$?
          set -e
          
          if [ $MERGE_EXIT_CODE -eq 0 ]; then
            echo "merge_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Merge completed successfully"
          else
            echo "merge_status=conflict" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Merge conflicts detected"
            
            # Show conflicted files
            echo "Conflicted files:"
            git status --porcelain | grep "^UU\|^AA\|^DD\|^AU\|^UA\|^UD\|^DU" || true
          fi

      - name: Resolve conflicts automatically
        if: steps.merge.outputs.merge_status == 'conflict'
        run: |
          # For conflicted files, prefer upstream version first, then restore our custom files
          git status --porcelain | grep "^UU\|^AA\|^DD\|^AU\|^UA\|^UD\|^DU" | cut -c4- | while read -r file; do
            echo "Resolving conflict for: $file"
            
            # Check if this is a file we want to preserve custom version
            if [[ "$file" == "src/web/"* ]] || \
               [[ "$file" == "WEB_UI_README.md" ]] || \
               [[ "$file" == "src/routes/webui.ts" ]] || \
               [[ "$file" == *"webui"* ]] || \
               [[ "$file" == *"standalone-webui"* ]] || \
               [[ "$file" == *"test-webui"* ]] || \
               [[ "$file" == "capture-screenshots.js" ]]; then
              echo "  ‚Üí Keeping our version (custom file)"
              git checkout --ours "$file"
            else
              echo "  ‚Üí Taking upstream version"
              git checkout --theirs "$file"
            fi
            
            git add "$file"
          done

      - name: Restore custom web interface
        run: |
          # Ensure our custom web interface is preserved
          if [ -d ".backup/web" ]; then
            echo "Restoring custom web interface..."
            mkdir -p src
            cp -r .backup/web src/
          fi
          
          # Restore other custom files
          files_to_restore=(
            "WEB_UI_README.md"
            "src/routes/webui.ts"
            "standalone-webui-test.js"
            "test-webui-server.js"
            "test-webui.sh"
            "capture-screenshots.js"
          )
          
          for file in "${files_to_restore[@]}"; do
            if [ -f ".backup/$file" ]; then
              echo "Restoring: $file"
              mkdir -p "$(dirname "$file")"
              cp ".backup/$file" "$file"
            fi
          done
          
          # Add restored files
          git add -A

      - name: Check for package.json changes
        id: check_package
        run: |
          if git diff --name-only upstream/main...HEAD | grep -q "package.json\|package-lock.json\|pnpm-lock.yaml"; then
            echo "package_changed=true" >> $GITHUB_OUTPUT
          else
            echo "package_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update dependencies if needed
        if: steps.check_package.outputs.package_changed == 'true'
        run: |
          echo "Package files changed, updating dependencies..."
          npm install
          git add package-lock.json || true

      - name: Commit merge if there are changes
        id: commit
        run: |
          if ! git diff --cached --quiet; then
            git commit -m "üîÑ Auto-sync with upstream

          This commit automatically merges the latest changes from upstream while preserving:
          - Custom web interface (/src/web/)
          - Web UI routes and components
          - Custom documentation (WEB_UI_README.md)
          - Test scripts for web UI functionality
          
          Merged from: upstream/main
          Generated by: .github/workflows/sync-upstream.yml"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          fi

      - name: Push sync branch
        if: steps.commit.outputs.has_changes == 'true'
        run: |
          git push origin "$SYNC_BRANCH"

      - name: Create Pull Request
        if: steps.commit.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîÑ Auto-sync with upstream',
              head: process.env.SYNC_BRANCH,
              base: 'main',
              body: `## Auto-sync with upstream

            This PR automatically syncs the latest changes from the upstream repository while preserving our custom web interface and related functionality.

            ### Changes Included
            - ‚úÖ Latest upstream changes merged
            - ‚úÖ Custom web interface preserved (\`/src/web/\`)
            - ‚úÖ Web UI routes and components maintained
            - ‚úÖ Custom documentation preserved
            - ‚úÖ Test scripts for web UI functionality maintained

            ### Protected Files
            The following custom files are automatically preserved during sync:
            - \`src/web/\` directory (entire custom web interface)
            - \`WEB_UI_README.md\`
            - \`src/routes/webui.ts\`
            - \`standalone-webui-test.js\`
            - \`test-webui-server.js\`
            - \`test-webui.sh\`
            - \`capture-screenshots.js\`

            ### Manual Review Required
            Please review this PR to ensure:
            1. No breaking changes affect the custom web interface
            2. New upstream features don't conflict with our customizations
            3. All tests pass with the merged changes

            ---
            ü§ñ This PR was automatically generated by the sync workflow.
            `
            });
            
            console.log(`Created PR #${pullRequest.number}: ${pullRequest.html_url}`);

      - name: Cleanup
        run: |
          rm -rf .backup

      - name: Summary
        run: |
          if [ "${{ steps.commit.outputs.has_changes }}" == "true" ]; then
            echo "‚úÖ Sync completed successfully!"
            echo "üìù Pull request created for review"
            echo "üîó Branch: $SYNC_BRANCH"
          else
            echo "‚ÑπÔ∏è No changes to sync - fork is up to date"
          fi